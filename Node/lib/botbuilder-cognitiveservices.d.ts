/** Declaration file generated by dts-gen */

export class QnAMakerDialog {
    constructor(options: any);

    defaultWaitNextMessage(session: any, qnaMakerResult: any): void;

    dialogResumed(session: any, result: any): void;

    emitError(session: any, err: any): void;

    invokeAnswer(session: any, recognizeResult: any, threshold: any, noMatchMessage: any): void;

    isConfidentAnswer(qnaMakerResult: any): any;

    qnaFeedbackStep(session: any, qnaMakerResult: any): void;

    recognize(context: any, cb: any): void;

    recognizer(plugin: any): any;

    recordQnAFeedback(body: any): void;

    replyReceived(session: any, recognizeResult: any): void;

    respondFromQnAMakerResult(session: any, qnaMakerResult: any): void;

}

export class QnAMakerRecognizer {
    constructor(options: any);

    recognize(context: any, cb: any): void;

    static recognize(utterance: any, kbUrl: any, ocpApimSubscriptionKey: any, top: any, intentName: any, callback: any): void;

}

export class QnAMakerTools {
    constructor();

    answerSelector(session: any, options: any): void;

    createLibrary(): any;

}

export namespace QnAMakerDialog {
    namespace prototype {
        function action(name: any, handler: any, options: any): any;

        function addDialogTrigger(actions: any, dialogId: any): void;

        function begin(session: any, args: any): void;

        function beginDialogAction(name: any, id: any, options: any): any;

        function cancelAction(name: any, msg: any, options: any): any;

        function clone(copyTo: any): any;

        function customAction(options: any): any;

        function defaultWaitNextMessage(session: any, qnaMakerResult: any): void;

        function dialogInterrupted(session: any, dialogId: any, dialogArgs: any): void;

        function dialogResumed(session: any, result: any): void;

        function emitError(session: any, err: any): void;

        function endConversationAction(name: any, msg: any, options: any): any;

        function findActionRoutes(context: any, callback: any): void;

        function invokeAnswer(session: any, recognizeResult: any, threshold: any, noMatchMessage: any): void;

        function isConfidentAnswer(qnaMakerResult: any): any;

        function qnaFeedbackStep(session: any, qnaMakerResult: any): void;

        function recognize(context: any, cb: any): void;

        function recognizer(plugin: any): any;

        function recordQnAFeedback(body: any): void;

        function reloadAction(name: any, msg: any, options: any): any;

        function replyReceived(session: any, recognizeResult: any): void;

        function respondFromQnAMakerResult(session: any, qnaMakerResult: any): void;

        function selectActionRoute(session: any, route: any): void;

        function triggerAction(options: any): any;

        function uniqueActionName(name: any, cnt: any): any;

        namespace action {
            const prototype: {
            };

        }

        namespace addDialogTrigger {
            const prototype: {
            };

        }

        namespace begin {
            const prototype: {
            };

        }

        namespace beginDialogAction {
            const prototype: {
            };

        }

        namespace cancelAction {
            const prototype: {
            };

        }

        namespace clone {
            const prototype: {
            };

        }

        namespace customAction {
            const prototype: {
            };

        }

        namespace defaultWaitNextMessage {
            const prototype: {
            };

        }

        namespace dialogInterrupted {
            const prototype: {
            };

        }

        namespace dialogResumed {
            const prototype: {
            };

        }

        namespace emitError {
            const prototype: {
            };

        }

        namespace endConversationAction {
            const prototype: {
            };

        }

        namespace findActionRoutes {
            const prototype: {
            };

        }

        namespace invokeAnswer {
            const prototype: {
            };

        }

        namespace isConfidentAnswer {
            const prototype: {
            };

        }

        namespace qnaFeedbackStep {
            const prototype: {
            };

        }

        namespace recognize {
            const prototype: {
            };

        }

        namespace recognizer {
            const prototype: {
            };

        }

        namespace recordQnAFeedback {
            const prototype: {
            };

        }

        namespace reloadAction {
            const prototype: {
            };

        }

        namespace replyReceived {
            const prototype: {
            };

        }

        namespace respondFromQnAMakerResult {
            const prototype: {
            };

        }

        namespace selectActionRoute {
            const prototype: {
            };

        }

        namespace triggerAction {
            const prototype: {
            };

        }

        namespace uniqueActionName {
            const prototype: {
            };

        }

    }

}

export namespace QnAMakerRecognizer {
    namespace prototype {
        function recognize(context: any, cb: any): void;

        namespace recognize {
            const prototype: {
            };

        }

    }

    namespace recognize {
        const prototype: {
        };

    }

}

export namespace QnAMakerTools {
    namespace prototype {
        function answerSelector(session: any, options: any): void;

        function createLibrary(): any;

        namespace answerSelector {
            const prototype: {
            };

        }

        namespace createLibrary {
            const prototype: {
            };

        }

    }

}

